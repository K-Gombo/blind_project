# BluePrint 적용하기 전 blind.py 

# 회원가입
@app.route('/register', methods=['POST', 'GET'])
def register() :
    if request.method == 'GET' :
        return render_template('member/register.html')
    elif request.method == 'POST' :
        # 입력 받은 데이터 변수 설정
        insert_id = request.form['user_id']
        insert_password = request.form['user_password']
        insert_name = request.form['user_name']
        insert_email = request.form['user_email']

        # ID & Email 중복 검사 및 결과
        id_result = blind_member_DAO.checkDuplicatedId(insert_id)
        email_result = blind_member_DAO.checkDuplicatedEmail(insert_email)

        # 중복 결과를 이용한 Error 출력 유무 논리값 출력
        check_result = blind_member_DAO.boolForDuplicate(id_result, email_result)
        password_result = blind_member_DAO.passwordConditionChecker(insert_password)


        #  Id, Email, Password 논리값에 따른 Redicet
        if check_result or password_result==False:
            # print('>>',check_result, '>>', password_result)
            return render_template('member/register.html', d_error=check_result, p_error= password_result)
        else:
            blind_member_DAO.insertMemberInfo(insert_id, insert_password, insert_name, insert_email)
            return redirect(url_for('index'))

    else :
        return redirect(url_for('index'))
    
# 로그인
@app.route('/login', methods=['POST', 'GET'])
def login() :
    if request.method == 'GET' :
        return render_template('member/login.html')
    elif request.method == 'POST' :
        # Form에서 입력한 id
        user_id = request.form['user_id']
        # Form에서 입력한 password
        user_password = request.form['user_password']
        # Form에서 입력한 id를 기반으로 DB 검색
        user_result = blind_member_DAO.selectMemberById(user_id)
        if user_result is not None :
            # Form에서 입력한 정보와 DB 정보 비교 후 일치하면 유저의 모든 정보를 Session에 저장
            if(user_id == user_result['id'] and user_password == user_result['password']) :
                session['login_info'] = user_result
                return redirect(url_for('index'))
            else :
                return render_template('member/login_fail.html')
        else :
            return render_template('member/login_fail.html')
    else :
        return render_template('index.html')
    
# 로그아웃
@app.route('/logout')
def logout() :
    if 'login_info' in session :
        session.pop('login_info', None)
        return redirect(url_for('index'))
    else :
        return '<h2>User already logged out <a href="/index">Click here</a></h2>'
    
글쓰기
@app.route('/write', methods=['POST', 'GET'])
def write() :
    if request.method == 'GET' :
        return render_template('write.html')
    elif request.method == 'POST' :
        # id와 name은 session에서 가져옴
        session_user = session['login_info']
        title = request.form['title']
        contents = request.form['contents']
        blind_board_DAO.insertBoard(title, contents, session_user['id'], session_user['name'])

        return redirect(url_for('index'))
    
글 상세보기
@app.route('/detail/<int:num>', methods=['GET'])
def detail(num) :
    # 세션 정보 가져가기
    if 'login_info' in session :
        session_user = session['login_info']
    # 해당 글의 idx로 SELECT
    select_result = blind_board_DAO.selectBoardByIdx(num)
    if 'login_info' in session :
        return render_template('detail.html', select_result = select_result, session_user = session_user)
    else :
        return render_template('detail.html', select_result = select_result)

# 글 수정하기
@app.route('/edit/<int:num>', methods=['POST', 'GET'])
def edit(num) :
    if request.method == 'GET' :
        # 세션 정보 가져가기
        session_user = session['login_info']        
        # 해당 글의 idx로 SELECT
        select_result = blind_board_DAO.selectBoardByIdx(num)        
        return render_template('edit.html', select_result = select_result, session_user = session_user)
    elif request.method == 'POST' :
        # id와 name은 session에서 가져옴
        session_user = session['login_info']
        idx = request.form['idx']
        title = request.form['title']
        contents = request.form['contents']
        blind_board_DAO.updateBoard(idx, title, contents, session_user['id'], session_user['name'])

        return redirect(url_for('index'))
    
# 글 삭제하기
@app.route('/delete/<int:num>', methods=['GET'])
def delete(num) :
    
    blind_board_DAO.deleteBoardByIdx(num)
    return redirect(url_for('index'))

# 회원 MyPage
@app.route('/mypage', methods=['GET', 'POST'])
def myPage() :
    session_user = session['login_info']
    return render_template('member/mypage.html', session_user = session_user)

# 회원 MyPage 수정화면
@app.route('/mypageEdit/<int:num>', methods=['GET', 'POST'])
def myPageEdit(num) :
    if request.method == 'GET' :
        # 세션 정보 가져가기
        session_user = session['login_info']        
        # 해당 글의 idx로 SELECT
        select_result = blind_member_DAO.selectMemberByIdx(num)        
        return render_template('member/mypageEdit.html', select_result = select_result, session_user = session_user) 
    elif request.method == 'POST' :
        user_idx = request.form['user_idx']
        user_id = request.form['user_id']
        user_password = request.form['user_password']
        user_name = request.form['user_name']
        user_email = request.form['user_email']
        blind_member_DAO.updateMember(user_password, user_name, user_email, user_idx)
        
        # Session 갱신 후 index redirect
        session['login_info'] = blind_member_DAO.selectMemberById(user_id)
        return redirect(url_for('index'))

# 검색어 수집 및 검색 로직에 전달
@app.route('/search', methods=['POST'])
def search():
    search_query = request.form['search']
    
    return redirect(url_for('search_results', query = search_query))

# 검색
@app.route('/search_results/<query>')
def search_results(query):

    if 'login_info' in session :
        search_result = blind_board_DAO.selectBoardForSearch(query)
        print(search_result)
        session_user = session['login_info']
        return render_template('search.html', session_user = session_user, search_result = search_result)
    else :
        search_result = blind_board_DAO.selectBoardForSearch(query)
        print(search_result)
        return render_template('search.html', search_result = search_result)

